// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - linked to Clerk authentication
model User {
  id                  String                @id @default(cuid())
  clerkId             String                @unique
  email               String                @unique
  name                String?
  avatar              String?
  role                String                @default("user") // "user" or "admin"
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  quizAttempts        QuizAttempt[]
  achievements        Achievement[]
  achievementProgress AchievementProgress?
}

model Subject {
  id     String  @id @default(cuid())
  name   String  @unique
  topics Topic[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id           String        @id @default(cuid())
  name         String
  subjectId    String
  subject      Subject       @relation(fields: [subjectId], references: [id])
  questions    Question[]
  subTopics    SubTopic[]
  quizAttempts QuizAttempt[]
  notesUrl     String?
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@unique([subjectId, name])
}

model SubTopic {
  id        String     @id @default(cuid())
  name      String
  topicId   String
  topic     Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([topicId, name])
  @@index([topicId])
}

model Question {
  id              String    @id @default(cuid())
  text            String
  options         Json      // Will store array of {id: string, text: string}
  correctAnswerId String
  explanation     String?
  difficulty      String    @default("medium") // easy, medium, hard
  topicId         String
  topic           Topic     @relation(fields: [topicId], references: [id])
  
  // Optional sub-topic link (for backwards compatibility)
  subTopicId      String?
  subTopic        SubTopic? @relation(fields: [subTopicId], references: [id], onDelete: SetNull)
  
  pyq             String?   // Previous-year question exam label, null if not a PYQ
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([topicId])
  @@index([subTopicId])
}

// QuizAttempt model - tracks user's quiz history in database
model QuizAttempt {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId          String
  topic            Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  score            Float
  totalQuestions   Int
  correctAnswers   Int
  percentage       Float
  timeSpent        Int      // in seconds
  difficulty       String   @default("medium")
  
  completedAt      DateTime @default(now())
  
  @@index([userId])
  @@index([topicId])
  @@index([completedAt])
}

// Achievement model - tracks user achievements and milestones
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // first_quiz, perfect_score, streak_7, speed_demon, subject_master
  title       String
  description String
  icon        String
  unlockedAt  DateTime @default(now())
  
  @@unique([userId, type])
  @@index([userId])
}

// Achievement Progress model - tracks user's achievement progress data
model AchievementProgress {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Store achievements data as JSON
  unlocked    String[] @default([]) // array of achievement types
  progress    Json     @default("{}")  // { achievement_type: { progress, maxProgress }, ... }
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

// Multilingual Quiz model - for multilingual quizzes with language-specific content
model MultilingualQuiz {
  id                   String                    @id @default(cuid())
  title                Json                      // { en: string, hi: string, es: string, fr: string }
  description          Json                      // { en: string, hi: string, es: string, fr: string }
  category             String
  difficulty           String                    // easy, medium, hard
  timeLimit            Int                       // in minutes
  availableLanguages   String[]                  @default(["en", "hi", "es", "fr"]) // array of language codes
  defaultLanguage      String                    @default("en")
  tags                 String[]                  @default([])
  
  questions            MultilingualQuestion[]
  attempts             MultilingualQuizAttempt[]
  
  createdBy            String?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  
  @@index([category])
  @@index([difficulty])
  @@index([createdAt])
}

// Audit log for important admin actions (language pruning, conversions)
model AuditLog {
  id               String   @id @default(cuid())
  event            String
  actorId          String?
  actorEmail       String?
  quizId           String?
  originalQuizId   String?
  languagesFound   String[] @default([])
  languagesPruned  String[] @default([])
  forcedMultilingual Boolean @default(false)
  meta             Json?
  createdAt        DateTime @default(now())

  @@index([quizId])
  @@index([actorId])
  @@index([createdAt])
}

// Multilingual Question model - questions with language-specific content
model MultilingualQuestion {
  id               String              @id @default(cuid())
  quizId           String
  quiz             MultilingualQuiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  question         Json                // { en: string, hi: string, es: string, fr: string }
  options          Json                // { en: [string, string, string, string], hi: [...], es: [...], fr: [...] }
  correctAnswer    Int                 // 0-3 (zero-indexed)
  explanation      Json                // { en: string, hi: string, es: string, fr: string }
  
  points           Int                 @default(10)
  category         String?
  sequenceNumber   Int                 // order in quiz (1-based)
  
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
  @@index([quizId])
  @@index([sequenceNumber])
}

// Multilingual Quiz Attempt - tracks user attempts on multilingual quizzes
model MultilingualQuizAttempt {
  id                  String              @id @default(cuid())
  userId              String
  quizId              String
  quiz                MultilingualQuiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  languageCode        String              // en, hi, es, fr - language user took quiz in
  
  score               Int
  totalQuestions      Int
  correctAnswers      Int
  percentage          Float
  timeSpent           Int                 // in seconds
  
  userAnswers         Json                // { questionId: number (0-3), questionId: number, ... }
  
  completedAt         DateTime            @default(now())
  
  @@index([userId])
  @@index([quizId])
  @@index([languageCode])
  @@index([completedAt])
}
