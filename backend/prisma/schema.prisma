// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - linked to Clerk authentication
model User {
  id            String        @id @default(cuid())
  clerkId       String        @unique
  email         String        @unique
  name          String?
  avatar        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  quizAttempts  QuizAttempt[]
}

model Subject {
  id     String  @id @default(cuid())
  name   String  @unique
  topics Topic[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id           String        @id @default(cuid())
  name         String
  subjectId    String
  subject      Subject       @relation(fields: [subjectId], references: [id])
  questions    Question[]
  quizAttempts QuizAttempt[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@unique([subjectId, name])
}

model Question {
  id              String   @id @default(cuid())
  text            String
  options         Json     // Will store array of {id: string, text: string}
  correctAnswerId String
  explanation     String?
  difficulty      String   @default("medium") // easy, medium, hard
  topicId         String
  topic           Topic    @relation(fields: [topicId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// QuizAttempt model - tracks user's quiz history in database
model QuizAttempt {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId          String
  topic            Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  score            Float
  totalQuestions   Int
  correctAnswers   Int
  percentage       Float
  timeSpent        Int      // in seconds
  difficulty       String   @default("medium")
  
  completedAt      DateTime @default(now())
  
  @@index([userId])
  @@index([topicId])
  @@index([completedAt])
}
